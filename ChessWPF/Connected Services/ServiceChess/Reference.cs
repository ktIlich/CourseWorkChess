//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChessWPF.ServiceChess {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChess.IServiceChess", CallbackContract=typeof(ChessWPF.ServiceChess.IServiceChessCallback))]
    public interface IServiceChess {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/Connect", ReplyAction="http://tempuri.org/IServiceChess/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/Connect", ReplyAction="http://tempuri.org/IServiceChess/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/Disconnect", ReplyAction="http://tempuri.org/IServiceChess/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/Disconnect", ReplyAction="http://tempuri.org/IServiceChess/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/CreateSession", ReplyAction="http://tempuri.org/IServiceChess/CreateSessionResponse")]
        int CreateSession(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/CreateSession", ReplyAction="http://tempuri.org/IServiceChess/CreateSessionResponse")]
        System.Threading.Tasks.Task<int> CreateSessionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/ConnectSession", ReplyAction="http://tempuri.org/IServiceChess/ConnectSessionResponse")]
        void ConnectSession(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/ConnectSession", ReplyAction="http://tempuri.org/IServiceChess/ConnectSessionResponse")]
        System.Threading.Tasks.Task ConnectSessionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/SetColor", ReplyAction="http://tempuri.org/IServiceChess/SetColorResponse")]
        void SetColor(int g_id, string color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/SetColor", ReplyAction="http://tempuri.org/IServiceChess/SetColorResponse")]
        System.Threading.Tasks.Task SetColorAsync(int g_id, string color);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetColor", ReplyAction="http://tempuri.org/IServiceChess/GetColorResponse")]
        string GetColor(int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetColor", ReplyAction="http://tempuri.org/IServiceChess/GetColorResponse")]
        System.Threading.Tasks.Task<string> GetColorAsync(int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetOnlineCount", ReplyAction="http://tempuri.org/IServiceChess/GetOnlineCountResponse")]
        int[] GetOnlineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetOnlineCount", ReplyAction="http://tempuri.org/IServiceChess/GetOnlineCountResponse")]
        System.Threading.Tasks.Task<int[]> GetOnlineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/StartGame", ReplyAction="http://tempuri.org/IServiceChess/StartGameResponse")]
        int StartGame(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/StartGame", ReplyAction="http://tempuri.org/IServiceChess/StartGameResponse")]
        System.Threading.Tasks.Task<int> StartGameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/EndGame", ReplyAction="http://tempuri.org/IServiceChess/EndGameResponse")]
        string EndGame(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/EndGame", ReplyAction="http://tempuri.org/IServiceChess/EndGameResponse")]
        System.Threading.Tasks.Task<string> EndGameAsync(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/LeaveSession", ReplyAction="http://tempuri.org/IServiceChess/LeaveSessionResponse")]
        void LeaveSession(int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/LeaveSession", ReplyAction="http://tempuri.org/IServiceChess/LeaveSessionResponse")]
        System.Threading.Tasks.Task LeaveSessionAsync(int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/SendMesg")]
        void SendMesg(string msg, int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/SendMesg")]
        System.Threading.Tasks.Task SendMesgAsync(string msg, int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/SendMove")]
        void SendMove(string move, int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/SendMove")]
        System.Threading.Tasks.Task SendMoveAsync(string move, int id, int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetGameInfo", ReplyAction="http://tempuri.org/IServiceChess/GetGameInfoResponse")]
        string GetGameInfo(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetGameInfo", ReplyAction="http://tempuri.org/IServiceChess/GetGameInfoResponse")]
        System.Threading.Tasks.Task<string> GetGameInfoAsync(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetFen", ReplyAction="http://tempuri.org/IServiceChess/GetFenResponse")]
        string GetFen(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/GetFen", ReplyAction="http://tempuri.org/IServiceChess/GetFenResponse")]
        System.Threading.Tasks.Task<string> GetFenAsync(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/DeleteFromQueue", ReplyAction="http://tempuri.org/IServiceChess/DeleteFromQueueResponse")]
        void DeleteFromQueue(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/DeleteFromQueue", ReplyAction="http://tempuri.org/IServiceChess/DeleteFromQueueResponse")]
        System.Threading.Tasks.Task DeleteFromQueueAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/CheckState", ReplyAction="http://tempuri.org/IServiceChess/CheckStateResponse")]
        int CheckState(int g_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChess/CheckState", ReplyAction="http://tempuri.org/IServiceChess/CheckStateResponse")]
        System.Threading.Tasks.Task<int> CheckStateAsync(int g_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChessCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/MsgCallback")]
        void MsgCallback(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChess/MoveCallBack")]
        void MoveCallBack(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChessChannel : ChessWPF.ServiceChess.IServiceChess, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChessClient : System.ServiceModel.DuplexClientBase<ChessWPF.ServiceChess.IServiceChess>, ChessWPF.ServiceChess.IServiceChess {
        
        public ServiceChessClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChessClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChessClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChessClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChessClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public int CreateSession(int id) {
            return base.Channel.CreateSession(id);
        }
        
        public System.Threading.Tasks.Task<int> CreateSessionAsync(int id) {
            return base.Channel.CreateSessionAsync(id);
        }
        
        public void ConnectSession(int id) {
            base.Channel.ConnectSession(id);
        }
        
        public System.Threading.Tasks.Task ConnectSessionAsync(int id) {
            return base.Channel.ConnectSessionAsync(id);
        }
        
        public void SetColor(int g_id, string color) {
            base.Channel.SetColor(g_id, color);
        }
        
        public System.Threading.Tasks.Task SetColorAsync(int g_id, string color) {
            return base.Channel.SetColorAsync(g_id, color);
        }
        
        public string GetColor(int id, int g_id) {
            return base.Channel.GetColor(id, g_id);
        }
        
        public System.Threading.Tasks.Task<string> GetColorAsync(int id, int g_id) {
            return base.Channel.GetColorAsync(id, g_id);
        }
        
        public int[] GetOnlineCount() {
            return base.Channel.GetOnlineCount();
        }
        
        public System.Threading.Tasks.Task<int[]> GetOnlineCountAsync() {
            return base.Channel.GetOnlineCountAsync();
        }
        
        public int StartGame(int id) {
            return base.Channel.StartGame(id);
        }
        
        public System.Threading.Tasks.Task<int> StartGameAsync(int id) {
            return base.Channel.StartGameAsync(id);
        }
        
        public string EndGame(int g_id) {
            return base.Channel.EndGame(g_id);
        }
        
        public System.Threading.Tasks.Task<string> EndGameAsync(int g_id) {
            return base.Channel.EndGameAsync(g_id);
        }
        
        public void LeaveSession(int id, int g_id) {
            base.Channel.LeaveSession(id, g_id);
        }
        
        public System.Threading.Tasks.Task LeaveSessionAsync(int id, int g_id) {
            return base.Channel.LeaveSessionAsync(id, g_id);
        }
        
        public void SendMesg(string msg, int id, int g_id) {
            base.Channel.SendMesg(msg, id, g_id);
        }
        
        public System.Threading.Tasks.Task SendMesgAsync(string msg, int id, int g_id) {
            return base.Channel.SendMesgAsync(msg, id, g_id);
        }
        
        public void SendMove(string move, int id, int g_id) {
            base.Channel.SendMove(move, id, g_id);
        }
        
        public System.Threading.Tasks.Task SendMoveAsync(string move, int id, int g_id) {
            return base.Channel.SendMoveAsync(move, id, g_id);
        }
        
        public string GetGameInfo(int g_id) {
            return base.Channel.GetGameInfo(g_id);
        }
        
        public System.Threading.Tasks.Task<string> GetGameInfoAsync(int g_id) {
            return base.Channel.GetGameInfoAsync(g_id);
        }
        
        public string GetFen(int g_id) {
            return base.Channel.GetFen(g_id);
        }
        
        public System.Threading.Tasks.Task<string> GetFenAsync(int g_id) {
            return base.Channel.GetFenAsync(g_id);
        }
        
        public void DeleteFromQueue(int id) {
            base.Channel.DeleteFromQueue(id);
        }
        
        public System.Threading.Tasks.Task DeleteFromQueueAsync(int id) {
            return base.Channel.DeleteFromQueueAsync(id);
        }
        
        public int CheckState(int g_id) {
            return base.Channel.CheckState(g_id);
        }
        
        public System.Threading.Tasks.Task<int> CheckStateAsync(int g_id) {
            return base.Channel.CheckStateAsync(g_id);
        }
    }
}
